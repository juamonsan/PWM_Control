
PWM_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004290  08004290  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004020  20000010  080042a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004030  080042a8  00024030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e15a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fd  00000000  00000000  0002e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165b9  00000000  00000000  00031c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d716  00000000  00000000  00048249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8ab  00000000  00000000  0005595f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e320a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  000e325c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041a0 	.word	0x080041a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080041a0 	.word	0x080041a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	20000080 	.word	0x20000080

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b09e      	sub	sp, #120	; 0x78
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fb43 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f871 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f903 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f8d7 	bl	80006ec <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ButtonSemaphore */
  osSemaphoreDef(ButtonSemaphore);
 800053e:	2300      	movs	r3, #0
 8000540:	673b      	str	r3, [r7, #112]	; 0x70
 8000542:	2300      	movs	r3, #0
 8000544:	677b      	str	r3, [r7, #116]	; 0x74
  ButtonSemaphoreHandle = osSemaphoreCreate(osSemaphore(ButtonSemaphore), 1);
 8000546:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054a:	2101      	movs	r1, #1
 800054c:	4618      	mov	r0, r3
 800054e:	f001 ff34 	bl	80023ba <osSemaphoreCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <main+0xcc>)
 8000556:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <main+0xd0>)
 800055a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800056c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fec1 	bl	80022fa <osThreadCreate>
 8000578:	4603      	mov	r3, r0
 800057a:	4a20      	ldr	r2, [pc, #128]	; (80005fc <main+0xd4>)
 800057c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Communications */
  osThreadDef(Communications, StartCommunications, osPriorityAboveNormal, 0, 128);
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0xd8>)
 8000580:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommunicationsHandle = osThreadCreate(osThread(Communications), NULL);
 8000592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f001 feae 	bl	80022fa <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xdc>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Blinky */
  osThreadDef(Blinky, StartBlinky, osPriorityNormal, 0, 128);
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xe0>)
 80005a6:	f107 041c 	add.w	r4, r7, #28
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkyHandle = osThreadCreate(osThread(Blinky), NULL);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe9b 	bl	80022fa <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xe4>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonCheck */
  osThreadDef(ButtonCheck, StartButtonCheck, osPriorityLow, 0, 128);
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xe8>)
 80005cc:	463c      	mov	r4, r7
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonCheckHandle = osThreadCreate(osThread(ButtonCheck), NULL);
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fe8a 	bl	80022fa <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0xec>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe7e 	bl	80022ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xc8>
 80005f2:	bf00      	nop
 80005f4:	200002d4 	.word	0x200002d4
 80005f8:	080041e8 	.word	0x080041e8
 80005fc:	200002c4 	.word	0x200002c4
 8000600:	08004204 	.word	0x08004204
 8000604:	200002c8 	.word	0x200002c8
 8000608:	08004220 	.word	0x08004220
 800060c:	200002cc 	.word	0x200002cc
 8000610:	0800423c 	.word	0x0800423c
 8000614:	200002d0 	.word	0x200002d0

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fdb2 	bl	8004190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000692:	2304      	movs	r3, #4
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fdb2 	bl	8001208 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 f9ab 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f814 	bl	80016f8 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f995 	bl	8000a04 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 fa08 	bl	8001b38 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f969 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000280 	.word	0x20000280
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <MX_GPIO_Init+0x124>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a41      	ldr	r2, [pc, #260]	; (8000864 <MX_GPIO_Init+0x124>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <MX_GPIO_Init+0x124>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <MX_GPIO_Init+0x124>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <MX_GPIO_Init+0x124>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_GPIO_Init+0x124>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b34      	ldr	r3, [pc, #208]	; (8000864 <MX_GPIO_Init+0x124>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a33      	ldr	r2, [pc, #204]	; (8000864 <MX_GPIO_Init+0x124>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_GPIO_Init+0x124>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <MX_GPIO_Init+0x124>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <MX_GPIO_Init+0x124>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_GPIO_Init+0x124>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4827      	ldr	r0, [pc, #156]	; (8000868 <MX_GPIO_Init+0x128>)
 80007cc:	f000 fce8 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4825      	ldr	r0, [pc, #148]	; (800086c <MX_GPIO_Init+0x12c>)
 80007d8:	f000 fce2 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007e2:	4823      	ldr	r0, [pc, #140]	; (8000870 <MX_GPIO_Init+0x130>)
 80007e4:	f000 fcdc 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	481b      	ldr	r0, [pc, #108]	; (800086c <MX_GPIO_Init+0x12c>)
 8000800:	f000 fb32 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000804:	2320      	movs	r3, #32
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_GPIO_Init+0x128>)
 800081c:	f000 fb24 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT1_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin;
 8000820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OUT1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_GPIO_Init+0x12c>)
 800083a:	f000 fb15 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT2_Pin|OUT3_Pin;
 800083e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_GPIO_Init+0x130>)
 8000858:	f000 fb06 	bl	8000e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800
 8000870:	40020400 	.word	0x40020400

08000874 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f001 fd88 	bl	8002392 <osDelay>
 8000882:	e7fb      	b.n	800087c <StartDefaultTask+0x8>

08000884 <StartCommunications>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunications */
void StartCommunications(void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunications */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 fd80 	bl	8002392 <osDelay>
 8000892:	e7fb      	b.n	800088c <StartCommunications+0x8>

08000894 <StartBlinky>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinky */
void StartBlinky(void const * argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinky */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800089c:	2120      	movs	r1, #32
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <StartBlinky+0x18>)
 80008a0:	f000 fc97 	bl	80011d2 <HAL_GPIO_TogglePin>
	  osDelay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f001 fd74 	bl	8002392 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008aa:	e7f7      	b.n	800089c <StartBlinky+0x8>
 80008ac:	40020000 	.word	0x40020000

080008b0 <StartButtonCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonCheck */
void StartButtonCheck(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonCheck */
	int8_t contador=0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80008bc:	bf00      	nop
 80008be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c2:	484c      	ldr	r0, [pc, #304]	; (80009f4 <StartButtonCheck+0x144>)
 80008c4:	f000 fc54 	bl	8001170 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <StartButtonCheck+0xe>

	  contador++;
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	73fb      	strb	r3, [r7, #15]
	  if (contador==0)
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d112      	bne.n	8000908 <StartButtonCheck+0x58>
	  {
		  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <StartButtonCheck+0x144>)
 80008ea:	f000 fc59 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	4840      	ldr	r0, [pc, #256]	; (80009f8 <StartButtonCheck+0x148>)
 80008f6:	f000 fc53 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000900:	483d      	ldr	r0, [pc, #244]	; (80009f8 <StartButtonCheck+0x148>)
 8000902:	f000 fc4d 	bl	80011a0 <HAL_GPIO_WritePin>
 8000906:	e05c      	b.n	80009c2 <StartButtonCheck+0x112>
	  }
	  else if (contador==1)
 8000908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d112      	bne.n	8000936 <StartButtonCheck+0x86>
	  {
		  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000916:	4837      	ldr	r0, [pc, #220]	; (80009f4 <StartButtonCheck+0x144>)
 8000918:	f000 fc42 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <StartButtonCheck+0x148>)
 8000924:	f000 fc3c 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092e:	4832      	ldr	r0, [pc, #200]	; (80009f8 <StartButtonCheck+0x148>)
 8000930:	f000 fc36 	bl	80011a0 <HAL_GPIO_WritePin>
 8000934:	e045      	b.n	80009c2 <StartButtonCheck+0x112>
	  }
	  else if (contador==2)
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d112      	bne.n	8000964 <StartButtonCheck+0xb4>
	  {
		  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <StartButtonCheck+0x144>)
 8000946:	f000 fc2b 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <StartButtonCheck+0x148>)
 8000952:	f000 fc25 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095c:	4826      	ldr	r0, [pc, #152]	; (80009f8 <StartButtonCheck+0x148>)
 800095e:	f000 fc1f 	bl	80011a0 <HAL_GPIO_WritePin>
 8000962:	e02e      	b.n	80009c2 <StartButtonCheck+0x112>
	  }
	  else if (contador==3)
 8000964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d112      	bne.n	8000992 <StartButtonCheck+0xe2>
	  {
		  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4820      	ldr	r0, [pc, #128]	; (80009f4 <StartButtonCheck+0x144>)
 8000974:	f000 fc14 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <StartButtonCheck+0x148>)
 8000980:	f000 fc0e 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <StartButtonCheck+0x148>)
 800098c:	f000 fc08 	bl	80011a0 <HAL_GPIO_WritePin>
 8000990:	e017      	b.n	80009c2 <StartButtonCheck+0x112>
	  }
	  else if (contador==4)
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d113      	bne.n	80009c2 <StartButtonCheck+0x112>
	  {
		  HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	4814      	ldr	r0, [pc, #80]	; (80009f4 <StartButtonCheck+0x144>)
 80009a2:	f000 fbfd 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <StartButtonCheck+0x148>)
 80009ae:	f000 fbf7 	bl	80011a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <StartButtonCheck+0x148>)
 80009ba:	f000 fbf1 	bl	80011a0 <HAL_GPIO_WritePin>
		  contador=-1;
 80009be:	23ff      	movs	r3, #255	; 0xff
 80009c0:	73fb      	strb	r3, [r7, #15]
	  }

	  char *str1 = "Button Pressed\n";
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <StartButtonCheck+0x14c>)
 80009c4:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f7ff fc0a 	bl	80001e0 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <StartButtonCheck+0x150>)
 80009d6:	f001 f8fc 	bl	8001bd2 <HAL_UART_Transmit>
	  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80009da:	bf00      	nop
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <StartButtonCheck+0x144>)
 80009e2:	f000 fbc5 	bl	8001170 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f7      	beq.n	80009dc <StartButtonCheck+0x12c>

    osDelay(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f001 fcd0 	bl	8002392 <osDelay>
  {
 80009f2:	e763      	b.n	80008bc <StartButtonCheck+0xc>
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020400 	.word	0x40020400
 80009fc:	08004258 	.word	0x08004258
 8000a00:	20000280 	.word	0x20000280

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_MspInit+0x54>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <HAL_MspInit+0x54>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x54>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_MspInit+0x54>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_MspInit+0x54>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_MspInit+0x54>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	f06f 0001 	mvn.w	r0, #1
 8000a56:	f000 f9de 	bl	8000e16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 f9c3 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f898 	bl	8000c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b2c:	f002 fdfe 	bl	800372c <xTaskGetSchedulerState>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d001      	beq.n	8000b3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b36:	f003 f8bf 	bl	8003cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6a:	490e      	ldr	r1, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b80:	4c0b      	ldr	r4, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8e:	f7ff ffd7 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 facb 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fcc7 	bl	8000528 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba8:	08004298 	.word	0x08004298
  ldr r2, =_sbss
 8000bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb0:	20004030 	.word	0x20004030

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f90d 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff ff10 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f917 	bl	8000e4e <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f8ed 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	200002d8 	.word	0x200002d8

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200002d8 	.word	0x200002d8

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff5c 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffb0 	bl	8000dbc <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e159      	b.n	8001138 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8148 	bne.w	8001132 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a2 	beq.w	8001132 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a56      	ldr	r2, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_GPIO_Init+0x2f0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x202>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2f4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1fe>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1fa>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_GPIO_Init+0x2fc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1f6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_GPIO_Init+0x300>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1f2>
 8001056:	2304      	movs	r3, #4
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105a:	2307      	movs	r3, #7
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x204>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_GPIO_Init+0x304>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a2f      	ldr	r2, [pc, #188]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x304>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_GPIO_Init+0x304>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f aea2 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e267      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e242      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a75      	ldr	r2, [pc, #468]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b70      	ldr	r3, [pc, #448]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6f      	ldr	r2, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fce0 	bl	8000c84 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fcdc 	bl	8000c84 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e207      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fccc 	bl	8000c84 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcc8 	bl	8000c84 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f3      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c7      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x244>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fc81 	bl	8000c84 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fc7d 	bl	8000c84 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a8      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4925      	ldr	r1, [pc, #148]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x244>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc60 	bl	8000c84 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc5c 	bl	8000c84 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e187      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d036      	beq.n	8001460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fc40 	bl	8000c84 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fc3c 	bl	8000c84 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e167      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e01b      	b.n	8001460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fc29 	bl	8000c84 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e00e      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fc25 	bl	8000c84 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d907      	bls.n	8001454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e150      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ea      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8097 	beq.w	800159c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a7c      	ldr	r2, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a73      	ldr	r2, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbe5 	bl	8000c84 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fbe1 	bl	8000c84 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e10c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2ea>
 80014e4:	4b64      	ldr	r3, [pc, #400]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a63      	ldr	r2, [pc, #396]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x30c>
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a57      	ldr	r2, [pc, #348]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	4b55      	ldr	r3, [pc, #340]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fba6 	bl	8000c84 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fba2 	bl	8000c84 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0cb      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ee      	beq.n	800153c <HAL_RCC_OscConfig+0x334>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb90 	bl	8000c84 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb8c 	bl	8000c84 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0b5      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a38      	ldr	r2, [pc, #224]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a1 	beq.w	80016e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d05c      	beq.n	800166c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d141      	bne.n	800163e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb60 	bl	8000c84 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb5c 	bl	8000c84 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e087      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb35 	bl	8000c84 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb31 	bl	8000c84 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x416>
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb1e 	bl	8000c84 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb1a 	bl	8000c84 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e045      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
 800166a:	e03d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e038      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000
 8001680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d028      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d121      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d11a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa4c 	bl	8000c84 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa48 	bl	8000c84 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f9ac 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	08004270 	.word	0x08004270
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d4:	2300      	movs	r3, #0
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80e1 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e0db      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018fc:	e0db      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_GetSysClockFreq+0x208>)
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001902:	e0d8      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d063      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	2200      	movs	r2, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
 8001924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001936:	4622      	mov	r2, r4
 8001938:	462b      	mov	r3, r5
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4621      	mov	r1, r4
 8001950:	1a51      	subs	r1, r2, r1
 8001952:	6139      	str	r1, [r7, #16]
 8001954:	4629      	mov	r1, r5
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001968:	4659      	mov	r1, fp
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001972:	4651      	mov	r1, sl
 8001974:	018a      	lsls	r2, r1, #6
 8001976:	4651      	mov	r1, sl
 8001978:	ebb2 0801 	subs.w	r8, r2, r1
 800197c:	4659      	mov	r1, fp
 800197e:	eb63 0901 	sbc.w	r9, r3, r1
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	4623      	mov	r3, r4
 800199c:	eb18 0303 	adds.w	r3, r8, r3
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	462b      	mov	r3, r5
 80019a4:	eb49 0303 	adc.w	r3, r9, r3
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b6:	4629      	mov	r1, r5
 80019b8:	024b      	lsls	r3, r1, #9
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c0:	4621      	mov	r1, r4
 80019c2:	024a      	lsls	r2, r1, #9
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ca:	2200      	movs	r2, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d4:	f7fe fc0c 	bl	80001f0 <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	4611      	mov	r1, r2
 80019ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019fc:	4642      	mov	r2, r8
 80019fe:	464b      	mov	r3, r9
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	0159      	lsls	r1, r3, #5
 8001a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0e:	0150      	lsls	r0, r2, #5
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4641      	mov	r1, r8
 8001a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a34:	ebb2 040a 	subs.w	r4, r2, sl
 8001a38:	eb63 050b 	sbc.w	r5, r3, fp
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	00eb      	lsls	r3, r5, #3
 8001a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4a:	00e2      	lsls	r2, r4, #3
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4643      	mov	r3, r8
 8001a52:	18e3      	adds	r3, r4, r3
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	464b      	mov	r3, r9
 8001a58:	eb45 0303 	adc.w	r3, r5, r3
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	028b      	lsls	r3, r1, #10
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a74:	4621      	mov	r1, r4
 8001a76:	028a      	lsls	r2, r1, #10
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	61fa      	str	r2, [r7, #28]
 8001a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a88:	f7fe fbb2 	bl	80001f0 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aec:	f7ff fff0 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08004280 	.word	0x08004280

08001b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b14:	f7ff ffdc 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0b5b      	lsrs	r3, r3, #13
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08004280 	.word	0x08004280

08001b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e03f      	b.n	8001bca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe ff82 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f929 	bl	8001dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08a      	sub	sp, #40	; 0x28
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d17c      	bne.n	8001cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_UART_Transmit+0x2c>
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e075      	b.n	8001cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_UART_Transmit+0x3e>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e06e      	b.n	8001cee <HAL_UART_Transmit+0x11c>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c26:	f7ff f82d 	bl	8000c84 <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c40:	d108      	bne.n	8001c54 <HAL_UART_Transmit+0x82>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e003      	b.n	8001c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c64:	e02a      	b.n	8001cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f840 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e036      	b.n	8001cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e007      	b.n	8001cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	3301      	adds	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1cf      	bne.n	8001c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f810 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b090      	sub	sp, #64	; 0x40
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d06:	e050      	b.n	8001daa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d04c      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d16:	f7fe ffb5 	bl	8000c84 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d241      	bcs.n	8001daa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	330c      	adds	r3, #12
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	e853 3f00 	ldrex	r3, [r3]
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	330c      	adds	r3, #12
 8001d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d46:	637a      	str	r2, [r7, #52]	; 0x34
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4e:	e841 2300 	strex	r3, r2, [r1]
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e5      	bne.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	e853 3f00 	ldrex	r3, [r3]
 8001d68:	613b      	str	r3, [r7, #16]
   return(result);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3314      	adds	r3, #20
 8001d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d7a:	623a      	str	r2, [r7, #32]
 8001d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	e841 2300 	strex	r3, r2, [r1]
 8001d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1e5      	bne.n	8001d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e00f      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d09f      	beq.n	8001d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3740      	adds	r7, #64	; 0x40
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd8:	b0c0      	sub	sp, #256	; 0x100
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df0:	68d9      	ldr	r1, [r3, #12]
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	ea40 0301 	orr.w	r3, r0, r1
 8001dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e2c:	f021 010c 	bic.w	r1, r1, #12
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4e:	6999      	ldr	r1, [r3, #24]
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	ea40 0301 	orr.w	r3, r0, r1
 8001e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <UART_SetConfig+0x2cc>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d005      	beq.n	8001e74 <UART_SetConfig+0xa0>
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <UART_SetConfig+0x2d0>)
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d104      	bne.n	8001e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e74:	f7ff fe4c 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
 8001e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e7c:	e003      	b.n	8001e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e7e:	f7ff fe33 	bl	8001ae8 <HAL_RCC_GetPCLK1Freq>
 8001e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e90:	f040 810c 	bne.w	80020ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	1891      	adds	r1, r2, r2
 8001eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eae:	415b      	adcs	r3, r3
 8001eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	eb12 0801 	adds.w	r8, r2, r1
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb43 0901 	adc.w	r9, r3, r1
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed6:	4690      	mov	r8, r2
 8001ed8:	4699      	mov	r9, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	eb18 0303 	adds.w	r3, r8, r3
 8001ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	eb49 0303 	adc.w	r3, r9, r3
 8001eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f02:	460b      	mov	r3, r1
 8001f04:	18db      	adds	r3, r3, r3
 8001f06:	653b      	str	r3, [r7, #80]	; 0x50
 8001f08:	4613      	mov	r3, r2
 8001f0a:	eb42 0303 	adc.w	r3, r2, r3
 8001f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f18:	f7fe f96a 	bl	80001f0 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <UART_SetConfig+0x2d4>)
 8001f22:	fba3 2302 	umull	r2, r3, r3, r2
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	011c      	lsls	r4, r3, #4
 8001f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	464b      	mov	r3, r9
 8001f40:	1891      	adds	r1, r2, r2
 8001f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f44:	415b      	adcs	r3, r3
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f52:	4649      	mov	r1, r9
 8001f54:	eb43 0b01 	adc.w	fp, r3, r1
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f6c:	4692      	mov	sl, r2
 8001f6e:	469b      	mov	fp, r3
 8001f70:	4643      	mov	r3, r8
 8001f72:	eb1a 0303 	adds.w	r3, sl, r3
 8001f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	18db      	adds	r3, r3, r3
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	eb42 0303 	adc.w	r3, r2, r3
 8001fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fae:	f7fe f91f 	bl	80001f0 <__aeabi_uldivmod>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <UART_SetConfig+0x2d4>)
 8001fba:	fba3 2301 	umull	r2, r3, r3, r1
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2264      	movs	r2, #100	; 0x64
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	1acb      	subs	r3, r1, r3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <UART_SetConfig+0x2d4>)
 8001fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fdc:	441c      	add	r4, r3
 8001fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ff0:	4642      	mov	r2, r8
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	1891      	adds	r1, r2, r2
 8001ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ff8:	415b      	adcs	r3, r3
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002000:	4641      	mov	r1, r8
 8002002:	1851      	adds	r1, r2, r1
 8002004:	6339      	str	r1, [r7, #48]	; 0x30
 8002006:	4649      	mov	r1, r9
 8002008:	414b      	adcs	r3, r1
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002018:	4659      	mov	r1, fp
 800201a:	00cb      	lsls	r3, r1, #3
 800201c:	4651      	mov	r1, sl
 800201e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002022:	4651      	mov	r1, sl
 8002024:	00ca      	lsls	r2, r1, #3
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4603      	mov	r3, r0
 800202c:	4642      	mov	r2, r8
 800202e:	189b      	adds	r3, r3, r2
 8002030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002034:	464b      	mov	r3, r9
 8002036:	460a      	mov	r2, r1
 8002038:	eb42 0303 	adc.w	r3, r2, r3
 800203c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800204c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002054:	460b      	mov	r3, r1
 8002056:	18db      	adds	r3, r3, r3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 800205a:	4613      	mov	r3, r2
 800205c:	eb42 0303 	adc.w	r3, r2, r3
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800206a:	f7fe f8c1 	bl	80001f0 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <UART_SetConfig+0x2d4>)
 8002074:	fba3 1302 	umull	r1, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	2164      	movs	r1, #100	; 0x64
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <UART_SetConfig+0x2d4>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4422      	add	r2, r4
 800209a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800209c:	e105      	b.n	80022aa <UART_SetConfig+0x4d6>
 800209e:	bf00      	nop
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40011400 	.word	0x40011400
 80020a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020be:	4642      	mov	r2, r8
 80020c0:	464b      	mov	r3, r9
 80020c2:	1891      	adds	r1, r2, r2
 80020c4:	6239      	str	r1, [r7, #32]
 80020c6:	415b      	adcs	r3, r3
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ce:	4641      	mov	r1, r8
 80020d0:	1854      	adds	r4, r2, r1
 80020d2:	4649      	mov	r1, r9
 80020d4:	eb43 0501 	adc.w	r5, r3, r1
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	00eb      	lsls	r3, r5, #3
 80020e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e6:	00e2      	lsls	r2, r4, #3
 80020e8:	4614      	mov	r4, r2
 80020ea:	461d      	mov	r5, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	18e3      	adds	r3, r4, r3
 80020f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020f4:	464b      	mov	r3, r9
 80020f6:	eb45 0303 	adc.w	r3, r5, r3
 80020fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800210a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800211a:	4629      	mov	r1, r5
 800211c:	008b      	lsls	r3, r1, #2
 800211e:	4621      	mov	r1, r4
 8002120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002124:	4621      	mov	r1, r4
 8002126:	008a      	lsls	r2, r1, #2
 8002128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800212c:	f7fe f860 	bl	80001f0 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <UART_SetConfig+0x4e4>)
 8002136:	fba3 2302 	umull	r2, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	011c      	lsls	r4, r3, #4
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800214c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	1891      	adds	r1, r2, r2
 8002156:	61b9      	str	r1, [r7, #24]
 8002158:	415b      	adcs	r3, r3
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002160:	4641      	mov	r1, r8
 8002162:	1851      	adds	r1, r2, r1
 8002164:	6139      	str	r1, [r7, #16]
 8002166:	4649      	mov	r1, r9
 8002168:	414b      	adcs	r3, r1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002178:	4659      	mov	r1, fp
 800217a:	00cb      	lsls	r3, r1, #3
 800217c:	4651      	mov	r1, sl
 800217e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002182:	4651      	mov	r1, sl
 8002184:	00ca      	lsls	r2, r1, #3
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4603      	mov	r3, r0
 800218c:	4642      	mov	r2, r8
 800218e:	189b      	adds	r3, r3, r2
 8002190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002194:	464b      	mov	r3, r9
 8002196:	460a      	mov	r2, r1
 8002198:	eb42 0303 	adc.w	r3, r2, r3
 800219c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021b8:	4649      	mov	r1, r9
 80021ba:	008b      	lsls	r3, r1, #2
 80021bc:	4641      	mov	r1, r8
 80021be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021c2:	4641      	mov	r1, r8
 80021c4:	008a      	lsls	r2, r1, #2
 80021c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021ca:	f7fe f811 	bl	80001f0 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <UART_SetConfig+0x4e4>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	3332      	adds	r3, #50	; 0x32
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <UART_SetConfig+0x4e4>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f2:	441c      	add	r4, r3
 80021f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f8:	2200      	movs	r2, #0
 80021fa:	673b      	str	r3, [r7, #112]	; 0x70
 80021fc:	677a      	str	r2, [r7, #116]	; 0x74
 80021fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002202:	4642      	mov	r2, r8
 8002204:	464b      	mov	r3, r9
 8002206:	1891      	adds	r1, r2, r2
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	415b      	adcs	r3, r3
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002212:	4641      	mov	r1, r8
 8002214:	1851      	adds	r1, r2, r1
 8002216:	6039      	str	r1, [r7, #0]
 8002218:	4649      	mov	r1, r9
 800221a:	414b      	adcs	r3, r1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800222a:	4659      	mov	r1, fp
 800222c:	00cb      	lsls	r3, r1, #3
 800222e:	4651      	mov	r1, sl
 8002230:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002234:	4651      	mov	r1, sl
 8002236:	00ca      	lsls	r2, r1, #3
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	4603      	mov	r3, r0
 800223e:	4642      	mov	r2, r8
 8002240:	189b      	adds	r3, r3, r2
 8002242:	66bb      	str	r3, [r7, #104]	; 0x68
 8002244:	464b      	mov	r3, r9
 8002246:	460a      	mov	r2, r1
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	663b      	str	r3, [r7, #96]	; 0x60
 8002258:	667a      	str	r2, [r7, #100]	; 0x64
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002266:	4649      	mov	r1, r9
 8002268:	008b      	lsls	r3, r1, #2
 800226a:	4641      	mov	r1, r8
 800226c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002270:	4641      	mov	r1, r8
 8002272:	008a      	lsls	r2, r1, #2
 8002274:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002278:	f7fd ffba 	bl	80001f0 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <UART_SetConfig+0x4e4>)
 8002282:	fba3 1302 	umull	r1, r3, r3, r2
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2164      	movs	r1, #100	; 0x64
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <UART_SetConfig+0x4e4>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4422      	add	r2, r4
 80022a8:	609a      	str	r2, [r3, #8]
}
 80022aa:	bf00      	nop
 80022ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	51eb851f 	.word	0x51eb851f

080022bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80022ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ce:	2b84      	cmp	r3, #132	; 0x84
 80022d0:	d005      	beq.n	80022de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80022d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	3303      	adds	r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022f0:	f000 fe1e 	bl	8002f30 <vTaskStartScheduler>
  
  return osOK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}

080022fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fc:	b089      	sub	sp, #36	; 0x24
 80022fe:	af04      	add	r7, sp, #16
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <osThreadCreate+0x54>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01c      	beq.n	800234e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685c      	ldr	r4, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681d      	ldr	r5, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691e      	ldr	r6, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ffc8 	bl	80022bc <makeFreeRtosPriority>
 800232c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002336:	9202      	str	r2, [sp, #8]
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	9100      	str	r1, [sp, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4632      	mov	r2, r6
 8002340:	4629      	mov	r1, r5
 8002342:	4620      	mov	r0, r4
 8002344:	f000 fc2c 	bl	8002ba0 <xTaskCreateStatic>
 8002348:	4603      	mov	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e01c      	b.n	8002388 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685c      	ldr	r4, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800235a:	b29e      	uxth	r6, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ffaa 	bl	80022bc <makeFreeRtosPriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	9200      	str	r2, [sp, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4632      	mov	r2, r6
 8002376:	4629      	mov	r1, r5
 8002378:	4620      	mov	r0, r4
 800237a:	f000 fc6e 	bl	8002c5a <xTaskCreate>
 800237e:	4603      	mov	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002392 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <osDelay+0x16>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	e000      	b.n	80023aa <osDelay+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fd8c 	bl	8002ec8 <vTaskDelay>
  
  return osOK;
 80023b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af02      	add	r7, sp, #8
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <osSemaphoreCreate+0x32>
    if (count == 1) {
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10a      	bne.n	80023e8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2203      	movs	r2, #3
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 f93a 	bl	8002658 <xQueueGenericCreateStatic>
 80023e4:	4603      	mov	r3, r0
 80023e6:	e016      	b.n	8002416 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e014      	b.n	8002416 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d110      	bne.n	8002414 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80023f2:	2203      	movs	r2, #3
 80023f4:	2100      	movs	r1, #0
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 f9a6 	bl	8002748 <xQueueGenericCreate>
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <osSemaphoreCreate+0x56>
 8002404:	2300      	movs	r3, #0
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f9f6 	bl	80027fc <xQueueGenericSend>
      return sema;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	e000      	b.n	8002416 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002414:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f103 0208 	add.w	r2, r3, #8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f103 0208 	add.w	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f103 0208 	add.w	r2, r3, #8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d103      	bne.n	80024e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e00c      	b.n	80024fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3308      	adds	r3, #8
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e002      	b.n	80024ee <vListInsert+0x2e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d2f6      	bcs.n	80024e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6892      	ldr	r2, [r2, #8]
 8002548:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6852      	ldr	r2, [r2, #4]
 8002552:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d103      	bne.n	8002566 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ae:	bf00      	nop
 80025b0:	e7fe      	b.n	80025b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025b2:	f001 faef 	bl	8003b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	441a      	add	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	3b01      	subs	r3, #1
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	22ff      	movs	r2, #255	; 0xff
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d114      	bne.n	8002632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01a      	beq.n	8002646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3310      	adds	r3, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fecd 	bl	80033b4 <xTaskRemoveFromEventList>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <xQueueGenericReset+0xcc>)
 8002622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	e009      	b.n	8002646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3310      	adds	r3, #16
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fef1 	bl	800241e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3324      	adds	r3, #36	; 0x24
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff feec 	bl	800241e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002646:	f001 fad5 	bl	8003bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <xQueueGenericCreateStatic+0x52>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <xQueueGenericCreateStatic+0x56>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueGenericCreateStatic+0x58>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	623b      	str	r3, [r7, #32]
}
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <xQueueGenericCreateStatic+0x7e>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueGenericCreateStatic+0x82>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueGenericCreateStatic+0x84>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026f6:	2348      	movs	r3, #72	; 0x48
 80026f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b48      	cmp	r3, #72	; 0x48
 80026fe:	d00a      	beq.n	8002716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	61bb      	str	r3, [r7, #24]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002716:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f83f 	bl	80027bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002740:	4618      	mov	r0, r3
 8002742:	3730      	adds	r7, #48	; 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xQueueGenericCreate+0x2a>
	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	613b      	str	r3, [r7, #16]
}
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3348      	adds	r3, #72	; 0x48
 8002780:	4618      	mov	r0, r3
 8002782:	f001 fae9 	bl	8003d58 <pvPortMalloc>
 8002786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d011      	beq.n	80027b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3348      	adds	r3, #72	; 0x48
 8002796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027a0:	79fa      	ldrb	r2, [r7, #7]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f805 	bl	80027bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027b2:	69bb      	ldr	r3, [r7, #24]
	}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e002      	b.n	80027de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027ea:	2101      	movs	r1, #1
 80027ec:	69b8      	ldr	r0, [r7, #24]
 80027ee:	f7ff fecb 	bl	8002588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSend+0x32>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueGenericSend+0x40>
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <xQueueGenericSend+0x44>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <xQueueGenericSend+0x46>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <xQueueGenericSend+0x60>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <xQueueGenericSend+0x6e>
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <xQueueGenericSend+0x72>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSend+0x74>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueGenericSend+0x8e>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	623b      	str	r3, [r7, #32]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288a:	f000 ff4f 	bl	800372c <xTaskGetSchedulerState>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <xQueueGenericSend+0x9e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <xQueueGenericSend+0xa2>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <xQueueGenericSend+0xa4>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueGenericSend+0xbe>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	61fb      	str	r3, [r7, #28]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ba:	f001 f96b 	bl	8003b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <xQueueGenericSend+0xd4>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d129      	bne.n	8002924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d6:	f000 f88f 	bl	80029f8 <prvCopyDataToQueue>
 80028da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd63 	bl	80033b4 <xTaskRemoveFromEventList>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <xQueueGenericSend+0x1f8>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	e00a      	b.n	800291c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <xQueueGenericSend+0x1f8>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800291c:	f001 f96a 	bl	8003bf4 <vPortExitCritical>
				return pdPASS;
 8002920:	2301      	movs	r3, #1
 8002922:	e063      	b.n	80029ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800292a:	f001 f963 	bl	8003bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800292e:	2300      	movs	r3, #0
 8002930:	e05c      	b.n	80029ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fd9b 	bl	8003478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002942:	2301      	movs	r3, #1
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002946:	f001 f955 	bl	8003bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800294a:	f000 fb51 	bl	8002ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800294e:	f001 f921 	bl	8003b94 <vPortEnterCritical>
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002958:	b25b      	sxtb	r3, r3
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d103      	bne.n	8002968 <xQueueGenericSend+0x16c>
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d103      	bne.n	800297e <xQueueGenericSend+0x182>
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297e:	f001 f939 	bl	8003bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002982:	1d3a      	adds	r2, r7, #4
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd8a 	bl	80034a4 <xTaskCheckForTimeOut>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d124      	bne.n	80029e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002998:	f000 f8ea 	bl	8002b70 <prvIsQueueFull>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	3310      	adds	r3, #16
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fcde 	bl	800336c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b2:	f000 f88b 	bl	8002acc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029b6:	f000 fb29 	bl	800300c <xTaskResumeAll>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af7c 	bne.w	80028ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <xQueueGenericSend+0x1f8>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	e772      	b.n	80028ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f000 f879 	bl	8002acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029da:	f000 fb17 	bl	800300c <xTaskResumeAll>
 80029de:	e76c      	b.n	80028ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029e2:	f000 f873 	bl	8002acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029e6:	f000 fb11 	bl	800300c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	e000ed04 	.word	0xe000ed04

080029f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d14d      	bne.n	8002aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fea0 	bl	8003768 <xTaskPriorityDisinherit>
 8002a28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e043      	b.n	8002aba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d119      	bne.n	8002a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6858      	ldr	r0, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	461a      	mov	r2, r3
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	f001 fb96 	bl	8004174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	441a      	add	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d32b      	bcc.n	8002aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e026      	b.n	8002aba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68d8      	ldr	r0, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	461a      	mov	r2, r3
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	f001 fb7c 	bl	8004174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	425b      	negs	r3, r3
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d207      	bcs.n	8002aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	441a      	add	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d105      	bne.n	8002aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ac2:	697b      	ldr	r3, [r7, #20]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ad4:	f001 f85e 	bl	8003b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae0:	e011      	b.n	8002b06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3324      	adds	r3, #36	; 0x24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fc60 	bl	80033b4 <xTaskRemoveFromEventList>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002afa:	f000 fd35 	bl	8003568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	dce9      	bgt.n	8002ae2 <prvUnlockQueue+0x16>
 8002b0e:	e000      	b.n	8002b12 <prvUnlockQueue+0x46>
					break;
 8002b10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b1a:	f001 f86b 	bl	8003bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b1e:	f001 f839 	bl	8003b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2a:	e011      	b.n	8002b50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3310      	adds	r3, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fc3b 	bl	80033b4 <xTaskRemoveFromEventList>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b44:	f000 fd10 	bl	8003568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dce9      	bgt.n	8002b2c <prvUnlockQueue+0x60>
 8002b58:	e000      	b.n	8002b5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	22ff      	movs	r2, #255	; 0xff
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b64:	f001 f846 	bl	8003bf4 <vPortExitCritical>
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b78:	f001 f80c 	bl	8003b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d102      	bne.n	8002b8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e001      	b.n	8002b92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b92:	f001 f82f 	bl	8003bf4 <vPortExitCritical>

	return xReturn;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	; 0x38
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xTaskCreateStatic+0x2a>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	623b      	str	r3, [r7, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	61fb      	str	r3, [r7, #28]
}
 8002be2:	bf00      	nop
 8002be4:	e7fe      	b.n	8002be4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002be6:	2354      	movs	r3, #84	; 0x54
 8002be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b54      	cmp	r3, #84	; 0x54
 8002bee:	d00a      	beq.n	8002c06 <xTaskCreateStatic+0x66>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	61bb      	str	r3, [r7, #24]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01e      	beq.n	8002c4c <xTaskCreateStatic+0xac>
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c26:	2300      	movs	r3, #0
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f850 	bl	8002ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c46:	f000 f8d5 	bl	8002df4 <prvAddNewTaskToReadyList>
 8002c4a:	e001      	b.n	8002c50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c50:	697b      	ldr	r3, [r7, #20]
	}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08c      	sub	sp, #48	; 0x30
 8002c5e:	af04      	add	r7, sp, #16
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f872 	bl	8003d58 <pvPortMalloc>
 8002c74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c7c:	2054      	movs	r0, #84	; 0x54
 8002c7e:	f001 f86b 	bl	8003d58 <pvPortMalloc>
 8002c82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	e005      	b.n	8002c9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f001 f92c 	bl	8003ef0 <vPortFree>
 8002c98:	e001      	b.n	8002c9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9303      	str	r3, [sp, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f80e 	bl	8002ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cc8:	69f8      	ldr	r0, [r7, #28]
 8002cca:	f000 f893 	bl	8002df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e002      	b.n	8002cda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cda:	69bb      	ldr	r3, [r7, #24]
	}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f023 0307 	bic.w	r3, r3, #7
 8002d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	617b      	str	r3, [r7, #20]
}
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01f      	beq.n	8002d72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e012      	b.n	8002d5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	7819      	ldrb	r1, [r3, #0]
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	3334      	adds	r3, #52	; 0x34
 8002d48:	460a      	mov	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d9e9      	bls.n	8002d38 <prvInitialiseNewTask+0x54>
 8002d64:	e000      	b.n	8002d68 <prvInitialiseNewTask+0x84>
			{
				break;
 8002d66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d70:	e003      	b.n	8002d7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d901      	bls.n	8002d84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d80:	2306      	movs	r3, #6
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fb5f 	bl	800245e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	3318      	adds	r3, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fb5a 	bl	800245e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f1c3 0207 	rsb	r2, r3, #7
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	69b8      	ldr	r0, [r7, #24]
 8002dd4:	f000 fdb4 	bl	8003940 <pxPortInitialiseStack>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dea:	bf00      	nop
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dfc:	f000 feca 	bl	8003b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <prvAddNewTaskToReadyList+0xb8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a29      	ldr	r2, [pc, #164]	; (8002eac <prvAddNewTaskToReadyList+0xb8>)
 8002e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <prvAddNewTaskToReadyList+0xbc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <prvAddNewTaskToReadyList+0xbc>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <prvAddNewTaskToReadyList+0xb8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d110      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e20:	f000 fbc6 	bl	80035b0 <prvInitialiseTaskLists>
 8002e24:	e00d      	b.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <prvAddNewTaskToReadyList+0xc0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <prvAddNewTaskToReadyList+0xbc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d802      	bhi.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <prvAddNewTaskToReadyList+0xbc>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <prvAddNewTaskToReadyList+0xcc>)
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7ff faff 	bl	8002478 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e7a:	f000 febb 	bl	8003bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <prvAddNewTaskToReadyList+0xc0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00e      	beq.n	8002ea4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <prvAddNewTaskToReadyList+0xbc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200003dc 	.word	0x200003dc
 8002eb0:	200002dc 	.word	0x200002dc
 8002eb4:	200003e8 	.word	0x200003e8
 8002eb8:	200003f8 	.word	0x200003f8
 8002ebc:	200003e4 	.word	0x200003e4
 8002ec0:	200002e0 	.word	0x200002e0
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <vTaskDelay+0x60>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <vTaskDelay+0x30>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60bb      	str	r3, [r7, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ef8:	f000 f87a 	bl	8002ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002efc:	2100      	movs	r1, #0
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fcb8 	bl	8003874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f04:	f000 f882 	bl	800300c <xTaskResumeAll>
 8002f08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <vTaskDelay+0x64>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000404 	.word	0x20000404
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f3e:	463a      	mov	r2, r7
 8002f40:	1d39      	adds	r1, r7, #4
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fad4 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	9202      	str	r2, [sp, #8]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	491e      	ldr	r1, [pc, #120]	; (8002fd8 <vTaskStartScheduler+0xa8>)
 8002f60:	481e      	ldr	r0, [pc, #120]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f62:	f7ff fe1d 	bl	8002ba0 <xTaskCreateStatic>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <vTaskStartScheduler+0xb0>)
 8002f6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <vTaskStartScheduler+0xb0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e001      	b.n	8002f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d116      	bne.n	8002fb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
}
 8002f96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <vTaskStartScheduler+0xb4>)
 8002f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <vTaskStartScheduler+0xb8>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <vTaskStartScheduler+0xbc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fac:	f000 fd50 	bl	8003a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fb0:	e00e      	b.n	8002fd0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d10a      	bne.n	8002fd0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60fb      	str	r3, [r7, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vTaskStartScheduler+0x9e>
}
 8002fd0:	bf00      	nop
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	08004268 	.word	0x08004268
 8002fdc:	08003581 	.word	0x08003581
 8002fe0:	20000400 	.word	0x20000400
 8002fe4:	200003fc 	.word	0x200003fc
 8002fe8:	200003e8 	.word	0x200003e8
 8002fec:	200003e0 	.word	0x200003e0

08002ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <vTaskSuspendAll+0x18>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	4a03      	ldr	r2, [pc, #12]	; (8003008 <vTaskSuspendAll+0x18>)
 8002ffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20000404 	.word	0x20000404

0800300c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <xTaskResumeAll+0x114>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <xTaskResumeAll+0x2c>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	603b      	str	r3, [r7, #0]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003038:	f000 fdac 	bl	8003b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <xTaskResumeAll+0x114>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3b01      	subs	r3, #1
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <xTaskResumeAll+0x114>)
 8003044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <xTaskResumeAll+0x114>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d161      	bne.n	8003112 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <xTaskResumeAll+0x118>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d05d      	beq.n	8003112 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003056:	e02e      	b.n	80030b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <xTaskResumeAll+0x11c>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3318      	adds	r3, #24
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fa64 	bl	8002532 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fa5f 	bl	8002532 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <xTaskResumeAll+0x120>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	4a2a      	ldr	r2, [pc, #168]	; (800312c <xTaskResumeAll+0x120>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <xTaskResumeAll+0x124>)
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7ff f9eb 	bl	8002478 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <xTaskResumeAll+0x128>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <xTaskResumeAll+0x12c>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xTaskResumeAll+0x11c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cc      	bne.n	8003058 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030c4:	f000 fb12 	bl	80036ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <xTaskResumeAll+0x130>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030d4:	f000 f836 	bl	8003144 <xTaskIncrementTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <xTaskResumeAll+0x12c>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f1      	bne.n	80030d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <xTaskResumeAll+0x130>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <xTaskResumeAll+0x12c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <xTaskResumeAll+0x134>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f000 fd6f 	bl	8003bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8003116:	68bb      	ldr	r3, [r7, #8]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000404 	.word	0x20000404
 8003124:	200003dc 	.word	0x200003dc
 8003128:	2000039c 	.word	0x2000039c
 800312c:	200003e4 	.word	0x200003e4
 8003130:	200002e0 	.word	0x200002e0
 8003134:	200002dc 	.word	0x200002dc
 8003138:	200003f0 	.word	0x200003f0
 800313c:	200003ec 	.word	0x200003ec
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <xTaskIncrementTick+0x144>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 808e 	bne.w	8003274 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003158:	4b4c      	ldr	r3, [pc, #304]	; (800328c <xTaskIncrementTick+0x148>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003160:	4a4a      	ldr	r2, [pc, #296]	; (800328c <xTaskIncrementTick+0x148>)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d120      	bne.n	80031ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800316c:	4b48      	ldr	r3, [pc, #288]	; (8003290 <xTaskIncrementTick+0x14c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <xTaskIncrementTick+0x48>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	603b      	str	r3, [r7, #0]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <xTaskIncrementTick+0x46>
 800318c:	4b40      	ldr	r3, [pc, #256]	; (8003290 <xTaskIncrementTick+0x14c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <xTaskIncrementTick+0x150>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <xTaskIncrementTick+0x14c>)
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4a3e      	ldr	r2, [pc, #248]	; (8003294 <xTaskIncrementTick+0x150>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <xTaskIncrementTick+0x154>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <xTaskIncrementTick+0x154>)
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	f000 fa9f 	bl	80036ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <xTaskIncrementTick+0x158>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d348      	bcc.n	800324a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <xTaskIncrementTick+0x14c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <xTaskIncrementTick+0x158>)
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	601a      	str	r2, [r3, #0]
					break;
 80031ca:	e03e      	b.n	800324a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <xTaskIncrementTick+0x14c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d203      	bcs.n	80031ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <xTaskIncrementTick+0x158>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031ea:	e02e      	b.n	800324a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f99e 	bl	8002532 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3318      	adds	r3, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f995 	bl	8002532 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	2201      	movs	r2, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <xTaskIncrementTick+0x15c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4313      	orrs	r3, r2
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <xTaskIncrementTick+0x15c>)
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <xTaskIncrementTick+0x160>)
 8003228:	441a      	add	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7ff f921 	bl	8002478 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <xTaskIncrementTick+0x164>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	429a      	cmp	r2, r3
 8003242:	d3b9      	bcc.n	80031b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003244:	2301      	movs	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003248:	e7b6      	b.n	80031b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <xTaskIncrementTick+0x164>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	4914      	ldr	r1, [pc, #80]	; (80032a4 <xTaskIncrementTick+0x160>)
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d901      	bls.n	8003266 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003262:	2301      	movs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <xTaskIncrementTick+0x168>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e004      	b.n	800327e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <xTaskIncrementTick+0x16c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <xTaskIncrementTick+0x16c>)
 800327c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800327e:	697b      	ldr	r3, [r7, #20]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000404 	.word	0x20000404
 800328c:	200003e0 	.word	0x200003e0
 8003290:	20000394 	.word	0x20000394
 8003294:	20000398 	.word	0x20000398
 8003298:	200003f4 	.word	0x200003f4
 800329c:	200003fc 	.word	0x200003fc
 80032a0:	200003e4 	.word	0x200003e4
 80032a4:	200002e0 	.word	0x200002e0
 80032a8:	200002dc 	.word	0x200002dc
 80032ac:	200003f0 	.word	0x200003f0
 80032b0:	200003ec 	.word	0x200003ec

080032b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ba:	4b27      	ldr	r3, [pc, #156]	; (8003358 <vTaskSwitchContext+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032c2:	4b26      	ldr	r3, [pc, #152]	; (800335c <vTaskSwitchContext+0xa8>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032c8:	e03f      	b.n	800334a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <vTaskSwitchContext+0xa8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <vTaskSwitchContext+0xac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	f1c3 031f 	rsb	r3, r3, #31
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	491f      	ldr	r1, [pc, #124]	; (8003364 <vTaskSwitchContext+0xb0>)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <vTaskSwitchContext+0x5c>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	607b      	str	r3, [r7, #4]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vTaskSwitchContext+0x5a>
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <vTaskSwitchContext+0xb0>)
 800331c:	4413      	add	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3308      	adds	r3, #8
 8003332:	429a      	cmp	r2, r3
 8003334:	d104      	bne.n	8003340 <vTaskSwitchContext+0x8c>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <vTaskSwitchContext+0xb4>)
 8003348:	6013      	str	r3, [r2, #0]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000404 	.word	0x20000404
 800335c:	200003f0 	.word	0x200003f0
 8003360:	200003e4 	.word	0x200003e4
 8003364:	200002e0 	.word	0x200002e0
 8003368:	200002dc 	.word	0x200002dc

0800336c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	60fb      	str	r3, [r7, #12]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <vTaskPlaceOnEventList+0x44>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3318      	adds	r3, #24
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff f890 	bl	80024c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033a0:	2101      	movs	r1, #1
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	f000 fa66 	bl	8003874 <prvAddCurrentTaskToDelayedList>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200002dc 	.word	0x200002dc

080033b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60fb      	str	r3, [r7, #12]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	3318      	adds	r3, #24
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f8a4 	bl	8002532 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <xTaskRemoveFromEventList+0xac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11c      	bne.n	800342c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f89b 	bl	8002532 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2201      	movs	r2, #1
 8003402:	409a      	lsls	r2, r3
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <xTaskRemoveFromEventList+0xb0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <xTaskRemoveFromEventList+0xb0>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4a13      	ldr	r2, [pc, #76]	; (8003468 <xTaskRemoveFromEventList+0xb4>)
 800341c:	441a      	add	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7ff f827 	bl	8002478 <vListInsertEnd>
 800342a:	e005      	b.n	8003438 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	3318      	adds	r3, #24
 8003430:	4619      	mov	r1, r3
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <xTaskRemoveFromEventList+0xb8>)
 8003434:	f7ff f820 	bl	8002478 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <xTaskRemoveFromEventList+0xbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d905      	bls.n	8003452 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <xTaskRemoveFromEventList+0xc0>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e001      	b.n	8003456 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003456:	697b      	ldr	r3, [r7, #20]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000404 	.word	0x20000404
 8003464:	200003e4 	.word	0x200003e4
 8003468:	200002e0 	.word	0x200002e0
 800346c:	2000039c 	.word	0x2000039c
 8003470:	200002dc 	.word	0x200002dc
 8003474:	200003f0 	.word	0x200003f0

08003478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <vTaskInternalSetTimeOutState+0x24>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <vTaskInternalSetTimeOutState+0x28>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	605a      	str	r2, [r3, #4]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	200003f4 	.word	0x200003f4
 80034a0:	200003e0 	.word	0x200003e0

080034a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80034e6:	f000 fb55 	bl	8003b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <xTaskCheckForTimeOut+0xbc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d102      	bne.n	800350a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e023      	b.n	8003552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <xTaskCheckForTimeOut+0xc0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d007      	beq.n	8003526 <xTaskCheckForTimeOut+0x82>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	e015      	b.n	8003552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	d20b      	bcs.n	8003548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff9b 	bl	8003478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e004      	b.n	8003552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003552:	f000 fb4f 	bl	8003bf4 <vPortExitCritical>

	return xReturn;
 8003556:	69fb      	ldr	r3, [r7, #28]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200003e0 	.word	0x200003e0
 8003564:	200003f4 	.word	0x200003f4

08003568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <vTaskMissedYield+0x14>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	200003f0 	.word	0x200003f0

08003580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003588:	f000 f852 	bl	8003630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <prvIdleTask+0x28>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d9f9      	bls.n	8003588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <prvIdleTask+0x2c>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035a4:	e7f0      	b.n	8003588 <prvIdleTask+0x8>
 80035a6:	bf00      	nop
 80035a8:	200002e0 	.word	0x200002e0
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	e00c      	b.n	80035d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <prvInitialiseTaskLists+0x60>)
 80035c8:	4413      	add	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe ff27 	bl	800241e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b06      	cmp	r3, #6
 80035da:	d9ef      	bls.n	80035bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <prvInitialiseTaskLists+0x64>)
 80035de:	f7fe ff1e 	bl	800241e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035e2:	480d      	ldr	r0, [pc, #52]	; (8003618 <prvInitialiseTaskLists+0x68>)
 80035e4:	f7fe ff1b 	bl	800241e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <prvInitialiseTaskLists+0x6c>)
 80035ea:	f7fe ff18 	bl	800241e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035ee:	480c      	ldr	r0, [pc, #48]	; (8003620 <prvInitialiseTaskLists+0x70>)
 80035f0:	f7fe ff15 	bl	800241e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035f4:	480b      	ldr	r0, [pc, #44]	; (8003624 <prvInitialiseTaskLists+0x74>)
 80035f6:	f7fe ff12 	bl	800241e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <prvInitialiseTaskLists+0x78>)
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <prvInitialiseTaskLists+0x64>)
 80035fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <prvInitialiseTaskLists+0x7c>)
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <prvInitialiseTaskLists+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200002e0 	.word	0x200002e0
 8003614:	2000036c 	.word	0x2000036c
 8003618:	20000380 	.word	0x20000380
 800361c:	2000039c 	.word	0x2000039c
 8003620:	200003b0 	.word	0x200003b0
 8003624:	200003c8 	.word	0x200003c8
 8003628:	20000394 	.word	0x20000394
 800362c:	20000398 	.word	0x20000398

08003630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003636:	e019      	b.n	800366c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003638:	f000 faac 	bl	8003b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <prvCheckTasksWaitingTermination+0x50>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe ff72 	bl	8002532 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <prvCheckTasksWaitingTermination+0x54>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <prvCheckTasksWaitingTermination+0x54>)
 8003656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3b01      	subs	r3, #1
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 8003660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003662:	f000 fac7 	bl	8003bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f810 	bl	800368c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e1      	bne.n	8003638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200003b0 	.word	0x200003b0
 8003684:	200003dc 	.word	0x200003dc
 8003688:	200003c4 	.word	0x200003c4

0800368c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fc24 	bl	8003ef0 <vPortFree>
				vPortFree( pxTCB );
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fc21 	bl	8003ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036ae:	e018      	b.n	80036e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d103      	bne.n	80036c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fc18 	bl	8003ef0 <vPortFree>
	}
 80036c0:	e00f      	b.n	80036e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d00a      	beq.n	80036e2 <prvDeleteTCB+0x56>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60fb      	str	r3, [r7, #12]
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <prvDeleteTCB+0x54>
	}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <prvResetNextTaskUnblockTime+0x38>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <prvResetNextTaskUnblockTime+0x3c>)
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003704:	e008      	b.n	8003718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <prvResetNextTaskUnblockTime+0x38>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <prvResetNextTaskUnblockTime+0x3c>)
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20000394 	.word	0x20000394
 8003728:	200003fc 	.word	0x200003fc

0800372c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <xTaskGetSchedulerState+0x34>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800373a:	2301      	movs	r3, #1
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e008      	b.n	8003752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <xTaskGetSchedulerState+0x38>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003748:	2302      	movs	r3, #2
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	e001      	b.n	8003752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003752:	687b      	ldr	r3, [r7, #4]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	200003e8 	.word	0x200003e8
 8003764:	20000404 	.word	0x20000404

08003768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06e      	beq.n	800385c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <xTaskPriorityDisinherit+0x100>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d00a      	beq.n	800379e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60bb      	str	r3, [r7, #8]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d044      	beq.n	800385c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d140      	bne.n	800385c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	3304      	adds	r3, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fea7 	bl	8002532 <uxListRemove>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	491f      	ldr	r1, [pc, #124]	; (800386c <xTaskPriorityDisinherit+0x104>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xTaskPriorityDisinherit+0xae>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2201      	movs	r2, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	4b18      	ldr	r3, [pc, #96]	; (8003870 <xTaskPriorityDisinherit+0x108>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4013      	ands	r3, r2
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <xTaskPriorityDisinherit+0x108>)
 8003814:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1c3 0207 	rsb	r2, r3, #7
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	2201      	movs	r2, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <xTaskPriorityDisinherit+0x108>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <xTaskPriorityDisinherit+0x108>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <xTaskPriorityDisinherit+0x104>)
 800384a:	441a      	add	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7fe fe10 	bl	8002478 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800385c:	697b      	ldr	r3, [r7, #20]
	}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200002dc 	.word	0x200002dc
 800386c:	200002e0 	.word	0x200002e0
 8003870:	200003e4 	.word	0x200003e4

08003874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe51 	bl	8002532 <uxListRemove>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2201      	movs	r2, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4013      	ands	r3, r2
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d10a      	bne.n	80038cc <prvAddCurrentTaskToDelayedList+0x58>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	481a      	ldr	r0, [pc, #104]	; (8003930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038c6:	f7fe fdd7 	bl	8002478 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038ca:	e026      	b.n	800391a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d209      	bcs.n	80038f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f7fe fde5 	bl	80024c0 <vListInsert>
}
 80038f6:	e010      	b.n	800391a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7fe fddb 	bl	80024c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <prvAddCurrentTaskToDelayedList+0xc8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d202      	bcs.n	800391a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003914:	4a09      	ldr	r2, [pc, #36]	; (800393c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6013      	str	r3, [r2, #0]
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200003e0 	.word	0x200003e0
 8003928:	200002dc 	.word	0x200002dc
 800392c:	200003e4 	.word	0x200003e4
 8003930:	200003c8 	.word	0x200003c8
 8003934:	20000398 	.word	0x20000398
 8003938:	20000394 	.word	0x20000394
 800393c:	200003fc 	.word	0x200003fc

08003940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3b04      	subs	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b04      	subs	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3b04      	subs	r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <pxPortInitialiseStack+0x64>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3b14      	subs	r3, #20
 800397a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3b04      	subs	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f06f 0202 	mvn.w	r2, #2
 800398e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b20      	subs	r3, #32
 8003994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	080039a9 	.word	0x080039a9

080039a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <prvTaskExitError+0x54>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ba:	d00a      	beq.n	80039d2 <prvTaskExitError+0x2a>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60fb      	str	r3, [r7, #12]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <prvTaskExitError+0x28>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
}
 80039e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039e6:	bf00      	nop
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0fc      	beq.n	80039e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	2000000c 	.word	0x2000000c

08003a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <pxCurrentTCBConst2>)
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	6808      	ldr	r0, [r1, #0]
 8003a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0a:	f380 8809 	msr	PSP, r0
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f380 8811 	msr	BASEPRI, r0
 8003a1a:	4770      	bx	lr
 8003a1c:	f3af 8000 	nop.w

08003a20 <pxCurrentTCBConst2>:
 8003a20:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop

08003a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a28:	4808      	ldr	r0, [pc, #32]	; (8003a4c <prvPortStartFirstTask+0x24>)
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	6800      	ldr	r0, [r0, #0]
 8003a2e:	f380 8808 	msr	MSP, r0
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f380 8814 	msr	CONTROL, r0
 8003a3a:	b662      	cpsie	i
 8003a3c:	b661      	cpsie	f
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	df00      	svc	0
 8003a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a4a:	bf00      	nop
 8003a4c:	e000ed08 	.word	0xe000ed08

08003a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a56:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <xPortStartScheduler+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <xPortStartScheduler+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10a      	bne.n	8003a76 <xPortStartScheduler+0x26>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	613b      	str	r3, [r7, #16]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a76:	4b3e      	ldr	r3, [pc, #248]	; (8003b70 <xPortStartScheduler+0x120>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <xPortStartScheduler+0x128>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10a      	bne.n	8003a96 <xPortStartScheduler+0x46>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60fb      	str	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <xPortStartScheduler+0x12c>)
 8003a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <xPortStartScheduler+0x130>)
 8003abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003abe:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <xPortStartScheduler+0x134>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ac4:	e009      	b.n	8003ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <xPortStartScheduler+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <xPortStartScheduler+0x134>)
 8003ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d0ef      	beq.n	8003ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <xPortStartScheduler+0x134>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d00a      	beq.n	8003b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <xPortStartScheduler+0x134>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <xPortStartScheduler+0x134>)
 8003b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b12:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <xPortStartScheduler+0x134>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	; (8003b84 <xPortStartScheduler+0x134>)
 8003b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <xPortStartScheduler+0x138>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <xPortStartScheduler+0x138>)
 8003b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <xPortStartScheduler+0x138>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <xPortStartScheduler+0x138>)
 8003b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b3e:	f000 f8dd 	bl	8003cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <xPortStartScheduler+0x13c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b48:	f000 f8fc 	bl	8003d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <xPortStartScheduler+0x140>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <xPortStartScheduler+0x140>)
 8003b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b58:	f7ff ff66 	bl	8003a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b5c:	f7ff fbaa 	bl	80032b4 <vTaskSwitchContext>
	prvTaskExitError();
 8003b60:	f7ff ff22 	bl	80039a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000ed00 	.word	0xe000ed00
 8003b74:	410fc271 	.word	0x410fc271
 8003b78:	410fc270 	.word	0x410fc270
 8003b7c:	e000e400 	.word	0xe000e400
 8003b80:	20000408 	.word	0x20000408
 8003b84:	2000040c 	.word	0x2000040c
 8003b88:	e000ed20 	.word	0xe000ed20
 8003b8c:	2000000c 	.word	0x2000000c
 8003b90:	e000ef34 	.word	0xe000ef34

08003b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	607b      	str	r3, [r7, #4]
}
 8003bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <vPortEnterCritical+0x58>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <vPortEnterCritical+0x58>)
 8003bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <vPortEnterCritical+0x58>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d10f      	bne.n	8003be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <vPortEnterCritical+0x5c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	603b      	str	r3, [r7, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <vPortEnterCritical+0x4a>
	}
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <vPortExitCritical+0x50>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <vPortExitCritical+0x24>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	607b      	str	r3, [r7, #4]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <vPortExitCritical+0x50>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <vPortExitCritical+0x50>)
 8003c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <vPortExitCritical+0x50>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <vPortExitCritical+0x42>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	2000000c 	.word	0x2000000c
	...

08003c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c50:	f3ef 8009 	mrs	r0, PSP
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <pxCurrentTCBConst>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f01e 0f10 	tst.w	lr, #16
 8003c60:	bf08      	it	eq
 8003c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6a:	6010      	str	r0, [r2, #0]
 8003c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c74:	f380 8811 	msr	BASEPRI, r0
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f7ff fb18 	bl	80032b4 <vTaskSwitchContext>
 8003c84:	f04f 0000 	mov.w	r0, #0
 8003c88:	f380 8811 	msr	BASEPRI, r0
 8003c8c:	bc09      	pop	{r0, r3}
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	6808      	ldr	r0, [r1, #0]
 8003c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c96:	f01e 0f10 	tst.w	lr, #16
 8003c9a:	bf08      	it	eq
 8003c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ca0:	f380 8809 	msr	PSP, r0
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	f3af 8000 	nop.w

08003cb0 <pxCurrentTCBConst>:
 8003cb0:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop

08003cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	607b      	str	r3, [r7, #4]
}
 8003cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cd2:	f7ff fa37 	bl	8003144 <xTaskIncrementTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <xPortSysTickHandler+0x40>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f383 8811 	msr	BASEPRI, r3
}
 8003cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <vPortSetupTimerInterrupt+0x34>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <vPortSetupTimerInterrupt+0x38>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <vPortSetupTimerInterrupt+0x3c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <vPortSetupTimerInterrupt+0x40>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <vPortSetupTimerInterrupt+0x44>)
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <vPortSetupTimerInterrupt+0x34>)
 8003d20:	2207      	movs	r2, #7
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e010 	.word	0xe000e010
 8003d34:	e000e018 	.word	0xe000e018
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	10624dd3 	.word	0x10624dd3
 8003d40:	e000e014 	.word	0xe000e014

08003d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d54 <vPortEnableVFP+0x10>
 8003d48:	6801      	ldr	r1, [r0, #0]
 8003d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d4e:	6001      	str	r1, [r0, #0]
 8003d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d52:	bf00      	nop
 8003d54:	e000ed88 	.word	0xe000ed88

08003d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d64:	f7ff f944 	bl	8002ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d68:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <pvPortMalloc+0x180>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d70:	f000 f920 	bl	8003fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <pvPortMalloc+0x184>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 8093 	bne.w	8003ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01d      	beq.n	8003dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d88:	2208      	movs	r2, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d014      	beq.n	8003dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	617b      	str	r3, [r7, #20]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06e      	beq.n	8003ea8 <pvPortMalloc+0x150>
 8003dca:	4b45      	ldr	r3, [pc, #276]	; (8003ee0 <pvPortMalloc+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d869      	bhi.n	8003ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <pvPortMalloc+0x18c>)
 8003dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dd8:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <pvPortMalloc+0x18c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dde:	e004      	b.n	8003dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d903      	bls.n	8003dfc <pvPortMalloc+0xa4>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f1      	bne.n	8003de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <pvPortMalloc+0x180>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d050      	beq.n	8003ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	2308      	movs	r3, #8
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d91f      	bls.n	8003e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <pvPortMalloc+0xf8>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	613b      	str	r3, [r7, #16]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e62:	69b8      	ldr	r0, [r7, #24]
 8003e64:	f000 f908 	bl	8004078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <pvPortMalloc+0x190>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d203      	bcs.n	8003e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <pvPortMalloc+0x188>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <pvPortMalloc+0x190>)
 8003e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <pvPortMalloc+0x184>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <pvPortMalloc+0x194>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <pvPortMalloc+0x194>)
 8003ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ea8:	f7ff f8b0 	bl	800300c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <pvPortMalloc+0x174>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <pvPortMalloc+0x172>
	return pvReturn;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20004018 	.word	0x20004018
 8003edc:	2000402c 	.word	0x2000402c
 8003ee0:	2000401c 	.word	0x2000401c
 8003ee4:	20004010 	.word	0x20004010
 8003ee8:	20004020 	.word	0x20004020
 8003eec:	20004024 	.word	0x20004024

08003ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04d      	beq.n	8003f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f02:	2308      	movs	r3, #8
 8003f04:	425b      	negs	r3, r3
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <vPortFree+0xb8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <vPortFree+0x44>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60fb      	str	r3, [r7, #12]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <vPortFree+0x62>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	60bb      	str	r3, [r7, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <vPortFree+0xb8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01e      	beq.n	8003f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11a      	bne.n	8003f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <vPortFree+0xb8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f78:	f7ff f83a 	bl	8002ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <vPortFree+0xbc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4413      	add	r3, r2
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <vPortFree+0xbc>)
 8003f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f8a:	6938      	ldr	r0, [r7, #16]
 8003f8c:	f000 f874 	bl	8004078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <vPortFree+0xc0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <vPortFree+0xc0>)
 8003f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f9a:	f7ff f837 	bl	800300c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000402c 	.word	0x2000402c
 8003fac:	2000401c 	.word	0x2000401c
 8003fb0:	20004028 	.word	0x20004028

08003fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <prvHeapInit+0xac>)
 8003fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <prvHeapInit+0xac>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <prvHeapInit+0xb0>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <prvHeapInit+0xb0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004000:	2208      	movs	r2, #8
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <prvHeapInit+0xb4>)
 8004014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvHeapInit+0xb4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvHeapInit+0xb4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <prvHeapInit+0xb4>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <prvHeapInit+0xb8>)
 8004042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <prvHeapInit+0xbc>)
 800404a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvHeapInit+0xc0>)
 800404e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004052:	601a      	str	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20000410 	.word	0x20000410
 8004064:	20004010 	.word	0x20004010
 8004068:	20004018 	.word	0x20004018
 800406c:	20004020 	.word	0x20004020
 8004070:	2000401c 	.word	0x2000401c
 8004074:	2000402c 	.word	0x2000402c

08004078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <prvInsertBlockIntoFreeList+0xac>)
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e002      	b.n	800408c <prvInsertBlockIntoFreeList+0x14>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d8f7      	bhi.n	8004086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4413      	add	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d108      	bne.n	80040ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d118      	bne.n	8004100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <prvInsertBlockIntoFreeList+0xb0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d00d      	beq.n	80040f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e008      	b.n	8004108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvInsertBlockIntoFreeList+0xb0>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e003      	b.n	8004108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d002      	beq.n	8004116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20004010 	.word	0x20004010
 8004128:	20004018 	.word	0x20004018

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4d0d      	ldr	r5, [pc, #52]	; (8004164 <__libc_init_array+0x38>)
 8004130:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	2600      	movs	r6, #0
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	4d0b      	ldr	r5, [pc, #44]	; (800416c <__libc_init_array+0x40>)
 800413e:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <__libc_init_array+0x44>)
 8004140:	f000 f82e 	bl	80041a0 <_init>
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	2600      	movs	r6, #0
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f855 3b04 	ldr.w	r3, [r5], #4
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f855 3b04 	ldr.w	r3, [r5], #4
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	08004290 	.word	0x08004290
 8004168:	08004290 	.word	0x08004290
 800416c:	08004290 	.word	0x08004290
 8004170:	08004294 	.word	0x08004294

08004174 <memcpy>:
 8004174:	440a      	add	r2, r1
 8004176:	4291      	cmp	r1, r2
 8004178:	f100 33ff 	add.w	r3, r0, #4294967295
 800417c:	d100      	bne.n	8004180 <memcpy+0xc>
 800417e:	4770      	bx	lr
 8004180:	b510      	push	{r4, lr}
 8004182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418a:	4291      	cmp	r1, r2
 800418c:	d1f9      	bne.n	8004182 <memcpy+0xe>
 800418e:	bd10      	pop	{r4, pc}

08004190 <memset>:
 8004190:	4402      	add	r2, r0
 8004192:	4603      	mov	r3, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	d100      	bne.n	800419a <memset+0xa>
 8004198:	4770      	bx	lr
 800419a:	f803 1b01 	strb.w	r1, [r3], #1
 800419e:	e7f9      	b.n	8004194 <memset+0x4>

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
